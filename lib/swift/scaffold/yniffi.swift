// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(yniffiFFI)
    import yniffiFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_uniffi_yniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_uniffi_yniffi_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol YSubscriptionProtocol: AnyObject {}

public class YSubscription:
    YSubscriptionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_ysubscription(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_ysubscription(pointer, $0) }
    }
}

public struct FfiConverterTypeYSubscription: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YSubscription

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YSubscription {
        return YSubscription(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YSubscription) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YSubscription {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YSubscription, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYSubscription_lift(_ pointer: UnsafeMutableRawPointer) throws -> YSubscription {
    return try FfiConverterTypeYSubscription.lift(pointer)
}

public func FfiConverterTypeYSubscription_lower(_ value: YSubscription) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYSubscription.lower(value)
}

public protocol YrsArrayProtocol: AnyObject {
    func each(tx: YrsTransaction, delegate: YrsArrayEachDelegate)

    func get(tx: YrsTransaction, index: UInt32) throws -> String

    func insert(tx: YrsTransaction, index: UInt32, value: String)

    func insertRange(tx: YrsTransaction, index: UInt32, values: [String])

    func length(tx: YrsTransaction) -> UInt32

    func observe(delegate: YrsArrayObservationDelegate) -> YSubscription

    func pushBack(tx: YrsTransaction, value: String)

    func pushFront(tx: YrsTransaction, value: String)

    func rawPtr() -> YrsCollectionPtr

    func remove(tx: YrsTransaction, index: UInt32)

    func removeRange(tx: YrsTransaction, index: UInt32, len: UInt32)

    func toA(tx: YrsTransaction) -> [String]
}

public class YrsArray:
    YrsArrayProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrsarray(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrsarray(pointer, $0) }
    }

    public func each(tx: YrsTransaction, delegate: YrsArrayEachDelegate) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_each(self.uniffiClonePointer(),
                                                             FfiConverterTypeYrsTransaction.lower(tx),
                                                             FfiConverterCallbackInterfaceYrsArrayEachDelegate.lower(delegate), $0)
            }
    }

    public func get(tx: YrsTransaction, index: UInt32) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsarray_get(self.uniffiClonePointer(),
                                                            FfiConverterTypeYrsTransaction.lower(tx),
                                                            FfiConverterUInt32.lower(index), $0)
            }
        )
    }

    public func insert(tx: YrsTransaction, index: UInt32, value: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_insert(self.uniffiClonePointer(),
                                                               FfiConverterTypeYrsTransaction.lower(tx),
                                                               FfiConverterUInt32.lower(index),
                                                               FfiConverterString.lower(value), $0)
            }
    }

    public func insertRange(tx: YrsTransaction, index: UInt32, values: [String]) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_insert_range(self.uniffiClonePointer(),
                                                                     FfiConverterTypeYrsTransaction.lower(tx),
                                                                     FfiConverterUInt32.lower(index),
                                                                     FfiConverterSequenceString.lower(values), $0)
            }
    }

    public func length(tx: YrsTransaction) -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsarray_length(self.uniffiClonePointer(),
                                                                   FfiConverterTypeYrsTransaction.lower(tx), $0)
                }
        )
    }

    public func observe(delegate: YrsArrayObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsarray_observe(self.uniffiClonePointer(),
                                                                    FfiConverterCallbackInterfaceYrsArrayObservationDelegate.lower(delegate), $0)
                }
        )
    }

    public func pushBack(tx: YrsTransaction, value: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_push_back(self.uniffiClonePointer(),
                                                                  FfiConverterTypeYrsTransaction.lower(tx),
                                                                  FfiConverterString.lower(value), $0)
            }
    }

    public func pushFront(tx: YrsTransaction, value: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_push_front(self.uniffiClonePointer(),
                                                                   FfiConverterTypeYrsTransaction.lower(tx),
                                                                   FfiConverterString.lower(value), $0)
            }
    }

    public func rawPtr() -> YrsCollectionPtr {
        return try! FfiConverterTypeYrsCollectionPtr.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsarray_raw_ptr(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func remove(tx: YrsTransaction, index: UInt32) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_remove(self.uniffiClonePointer(),
                                                               FfiConverterTypeYrsTransaction.lower(tx),
                                                               FfiConverterUInt32.lower(index), $0)
            }
    }

    public func removeRange(tx: YrsTransaction, index: UInt32, len: UInt32) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsarray_remove_range(self.uniffiClonePointer(),
                                                                     FfiConverterTypeYrsTransaction.lower(tx),
                                                                     FfiConverterUInt32.lower(index),
                                                                     FfiConverterUInt32.lower(len), $0)
            }
    }

    public func toA(tx: YrsTransaction) -> [String] {
        return try! FfiConverterSequenceString.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsarray_to_a(self.uniffiClonePointer(),
                                                                 FfiConverterTypeYrsTransaction.lower(tx), $0)
                }
        )
    }
}

public struct FfiConverterTypeYrsArray: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsArray

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsArray {
        return YrsArray(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsArray) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsArray {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsArray, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsArray_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsArray {
    return try FfiConverterTypeYrsArray.lift(pointer)
}

public func FfiConverterTypeYrsArray_lower(_ value: YrsArray) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsArray.lower(value)
}

public protocol YrsDocProtocol: AnyObject {
    func encodeDiffV1(tx: YrsTransaction, stateVector: [UInt8]) throws -> [UInt8]

    func getArray(name: String) -> YrsArray

    func getMap(name: String) -> YrsMap

    func getText(name: String) -> YrsText

    func transact(origin: YrsOrigin?) -> YrsTransaction

    func undoManager(trackedRefs: [YrsCollectionPtr]) -> YrsUndoManager
}

public class YrsDoc:
    YrsDocProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrsdoc(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_uniffi_yniffi_fn_constructor_yrsdoc_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrsdoc(pointer, $0) }
    }

    public func encodeDiffV1(tx: YrsTransaction, stateVector: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsdoc_encode_diff_v1(self.uniffiClonePointer(),
                                                                     FfiConverterTypeYrsTransaction.lower(tx),
                                                                     FfiConverterSequenceUInt8.lower(stateVector), $0)
            }
        )
    }

    public func getArray(name: String) -> YrsArray {
        return try! FfiConverterTypeYrsArray.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsdoc_get_array(self.uniffiClonePointer(),
                                                                    FfiConverterString.lower(name), $0)
                }
        )
    }

    public func getMap(name: String) -> YrsMap {
        return try! FfiConverterTypeYrsMap.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsdoc_get_map(self.uniffiClonePointer(),
                                                                  FfiConverterString.lower(name), $0)
                }
        )
    }

    public func getText(name: String) -> YrsText {
        return try! FfiConverterTypeYrsText.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsdoc_get_text(self.uniffiClonePointer(),
                                                                   FfiConverterString.lower(name), $0)
                }
        )
    }

    public func transact(origin: YrsOrigin?) -> YrsTransaction {
        return try! FfiConverterTypeYrsTransaction.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsdoc_transact(self.uniffiClonePointer(),
                                                                   FfiConverterOptionTypeYrsOrigin.lower(origin), $0)
                }
        )
    }

    public func undoManager(trackedRefs: [YrsCollectionPtr]) -> YrsUndoManager {
        return try! FfiConverterTypeYrsUndoManager.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsdoc_undo_manager(self.uniffiClonePointer(),
                                                                       FfiConverterSequenceTypeYrsCollectionPtr.lower(trackedRefs), $0)
                }
        )
    }
}

public struct FfiConverterTypeYrsDoc: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsDoc

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsDoc {
        return YrsDoc(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsDoc) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsDoc {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsDoc, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsDoc_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsDoc {
    return try FfiConverterTypeYrsDoc.lift(pointer)
}

public func FfiConverterTypeYrsDoc_lower(_ value: YrsDoc) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsDoc.lower(value)
}

public protocol YrsMapProtocol: AnyObject {
    func clear(tx: YrsTransaction)

    func containsKey(tx: YrsTransaction, key: String) -> Bool

    func each(tx: YrsTransaction, delegate: YrsMapKvIteratorDelegate)

    func get(tx: YrsTransaction, key: String) throws -> String

    func insert(tx: YrsTransaction, key: String, value: String)

    func keys(tx: YrsTransaction, delegate: YrsMapIteratorDelegate)

    func length(tx: YrsTransaction) -> UInt32

    func observe(delegate: YrsMapObservationDelegate) -> YSubscription

    func rawPtr() -> YrsCollectionPtr

    func remove(tx: YrsTransaction, key: String) throws -> String?

    func values(tx: YrsTransaction, delegate: YrsMapIteratorDelegate)
}

public class YrsMap:
    YrsMapProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrsmap(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrsmap(pointer, $0) }
    }

    public func clear(tx: YrsTransaction) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsmap_clear(self.uniffiClonePointer(),
                                                            FfiConverterTypeYrsTransaction.lower(tx), $0)
            }
    }

    public func containsKey(tx: YrsTransaction, key: String) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsmap_contains_key(self.uniffiClonePointer(),
                                                                       FfiConverterTypeYrsTransaction.lower(tx),
                                                                       FfiConverterString.lower(key), $0)
                }
        )
    }

    public func each(tx: YrsTransaction, delegate: YrsMapKvIteratorDelegate) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsmap_each(self.uniffiClonePointer(),
                                                           FfiConverterTypeYrsTransaction.lower(tx),
                                                           FfiConverterCallbackInterfaceYrsMapKvIteratorDelegate.lower(delegate), $0)
            }
    }

    public func get(tx: YrsTransaction, key: String) throws -> String {
        return try FfiConverterString.lift(
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsmap_get(self.uniffiClonePointer(),
                                                          FfiConverterTypeYrsTransaction.lower(tx),
                                                          FfiConverterString.lower(key), $0)
            }
        )
    }

    public func insert(tx: YrsTransaction, key: String, value: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsmap_insert(self.uniffiClonePointer(),
                                                             FfiConverterTypeYrsTransaction.lower(tx),
                                                             FfiConverterString.lower(key),
                                                             FfiConverterString.lower(value), $0)
            }
    }

    public func keys(tx: YrsTransaction, delegate: YrsMapIteratorDelegate) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsmap_keys(self.uniffiClonePointer(),
                                                           FfiConverterTypeYrsTransaction.lower(tx),
                                                           FfiConverterCallbackInterfaceYrsMapIteratorDelegate.lower(delegate), $0)
            }
    }

    public func length(tx: YrsTransaction) -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsmap_length(self.uniffiClonePointer(),
                                                                 FfiConverterTypeYrsTransaction.lower(tx), $0)
                }
        )
    }

    public func observe(delegate: YrsMapObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsmap_observe(self.uniffiClonePointer(),
                                                                  FfiConverterCallbackInterfaceYrsMapObservationDelegate.lower(delegate), $0)
                }
        )
    }

    public func rawPtr() -> YrsCollectionPtr {
        return try! FfiConverterTypeYrsCollectionPtr.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsmap_raw_ptr(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func remove(tx: YrsTransaction, key: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsmap_remove(self.uniffiClonePointer(),
                                                             FfiConverterTypeYrsTransaction.lower(tx),
                                                             FfiConverterString.lower(key), $0)
            }
        )
    }

    public func values(tx: YrsTransaction, delegate: YrsMapIteratorDelegate) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsmap_values(self.uniffiClonePointer(),
                                                             FfiConverterTypeYrsTransaction.lower(tx),
                                                             FfiConverterCallbackInterfaceYrsMapIteratorDelegate.lower(delegate), $0)
            }
    }
}

public struct FfiConverterTypeYrsMap: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsMap

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsMap {
        return YrsMap(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsMap) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsMap {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsMap, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsMap_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsMap {
    return try FfiConverterTypeYrsMap.lift(pointer)
}

public func FfiConverterTypeYrsMap_lower(_ value: YrsMap) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsMap.lower(value)
}

public protocol YrsTextProtocol: AnyObject {
    func append(tx: YrsTransaction, text: String)

    func format(tx: YrsTransaction, index: UInt32, length: UInt32, attrs: String)

    func getString(tx: YrsTransaction) -> String

    func insert(tx: YrsTransaction, index: UInt32, chunk: String)

    func insertEmbed(tx: YrsTransaction, index: UInt32, content: String)

    func insertEmbedWithAttributes(tx: YrsTransaction, index: UInt32, content: String, attrs: String)

    func insertWithAttributes(tx: YrsTransaction, index: UInt32, chunk: String, attrs: String)

    func length(tx: YrsTransaction) -> UInt32

    func observe(delegate: YrsTextObservationDelegate) -> YSubscription

    func rawPtr() -> YrsCollectionPtr

    func removeRange(tx: YrsTransaction, start: UInt32, length: UInt32)
}

public class YrsText:
    YrsTextProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrstext(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrstext(pointer, $0) }
    }

    public func append(tx: YrsTransaction, text: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_append(self.uniffiClonePointer(),
                                                              FfiConverterTypeYrsTransaction.lower(tx),
                                                              FfiConverterString.lower(text), $0)
            }
    }

    public func format(tx: YrsTransaction, index: UInt32, length: UInt32, attrs: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_format(self.uniffiClonePointer(),
                                                              FfiConverterTypeYrsTransaction.lower(tx),
                                                              FfiConverterUInt32.lower(index),
                                                              FfiConverterUInt32.lower(length),
                                                              FfiConverterString.lower(attrs), $0)
            }
    }

    public func getString(tx: YrsTransaction) -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstext_get_string(self.uniffiClonePointer(),
                                                                      FfiConverterTypeYrsTransaction.lower(tx), $0)
                }
        )
    }

    public func insert(tx: YrsTransaction, index: UInt32, chunk: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_insert(self.uniffiClonePointer(),
                                                              FfiConverterTypeYrsTransaction.lower(tx),
                                                              FfiConverterUInt32.lower(index),
                                                              FfiConverterString.lower(chunk), $0)
            }
    }

    public func insertEmbed(tx: YrsTransaction, index: UInt32, content: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_insert_embed(self.uniffiClonePointer(),
                                                                    FfiConverterTypeYrsTransaction.lower(tx),
                                                                    FfiConverterUInt32.lower(index),
                                                                    FfiConverterString.lower(content), $0)
            }
    }

    public func insertEmbedWithAttributes(tx: YrsTransaction, index: UInt32, content: String, attrs: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_insert_embed_with_attributes(self.uniffiClonePointer(),
                                                                                    FfiConverterTypeYrsTransaction.lower(tx),
                                                                                    FfiConverterUInt32.lower(index),
                                                                                    FfiConverterString.lower(content),
                                                                                    FfiConverterString.lower(attrs), $0)
            }
    }

    public func insertWithAttributes(tx: YrsTransaction, index: UInt32, chunk: String, attrs: String) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_insert_with_attributes(self.uniffiClonePointer(),
                                                                              FfiConverterTypeYrsTransaction.lower(tx),
                                                                              FfiConverterUInt32.lower(index),
                                                                              FfiConverterString.lower(chunk),
                                                                              FfiConverterString.lower(attrs), $0)
            }
    }

    public func length(tx: YrsTransaction) -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstext_length(self.uniffiClonePointer(),
                                                                  FfiConverterTypeYrsTransaction.lower(tx), $0)
                }
        )
    }

    public func observe(delegate: YrsTextObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstext_observe(self.uniffiClonePointer(),
                                                                   FfiConverterCallbackInterfaceYrsTextObservationDelegate.lower(delegate), $0)
                }
        )
    }

    public func rawPtr() -> YrsCollectionPtr {
        return try! FfiConverterTypeYrsCollectionPtr.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstext_raw_ptr(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func removeRange(tx: YrsTransaction, start: UInt32, length: UInt32) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstext_remove_range(self.uniffiClonePointer(),
                                                                    FfiConverterTypeYrsTransaction.lower(tx),
                                                                    FfiConverterUInt32.lower(start),
                                                                    FfiConverterUInt32.lower(length), $0)
            }
    }
}

public struct FfiConverterTypeYrsText: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsText

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsText {
        return YrsText(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsText) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsText {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsText, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsText_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsText {
    return try FfiConverterTypeYrsText.lift(pointer)
}

public func FfiConverterTypeYrsText_lower(_ value: YrsText) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsText.lower(value)
}

public protocol YrsTransactionProtocol: AnyObject {
    func free()

    func origin() -> YrsOrigin?

    func transactionApplyUpdate(update: [UInt8]) throws

    func transactionEncodeStateAsUpdate() -> [UInt8]

    func transactionEncodeStateAsUpdateFromSv(stateVector: [UInt8]) throws -> [UInt8]

    func transactionEncodeUpdate() -> [UInt8]

    func transactionGetArray(name: String) -> YrsArray?

    func transactionGetMap(name: String) -> YrsMap?

    func transactionGetText(name: String) -> YrsText?

    func transactionStateVector() -> [UInt8]
}

public class YrsTransaction:
    YrsTransactionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrstransaction(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrstransaction(pointer, $0) }
    }

    public func free() {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrstransaction_free(self.uniffiClonePointer(), $0)
            }
    }

    public func origin() -> YrsOrigin? {
        return try! FfiConverterOptionTypeYrsOrigin.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_origin(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func transactionApplyUpdate(update: [UInt8]) throws {
        try
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_apply_update(self.uniffiClonePointer(),
                                                                                       FfiConverterSequenceUInt8.lower(update), $0)
            }
    }

    public func transactionEncodeStateAsUpdate() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_encode_state_as_update(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func transactionEncodeStateAsUpdateFromSv(stateVector: [UInt8]) throws -> [UInt8] {
        return try FfiConverterSequenceUInt8.lift(
            rustCallWithError(FfiConverterTypeCodingError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_encode_state_as_update_from_sv(self.uniffiClonePointer(),
                                                                                                         FfiConverterSequenceUInt8.lower(stateVector), $0)
            }
        )
    }

    public func transactionEncodeUpdate() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_encode_update(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func transactionGetArray(name: String) -> YrsArray? {
        return try! FfiConverterOptionTypeYrsArray.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_get_array(self.uniffiClonePointer(),
                                                                                        FfiConverterString.lower(name), $0)
                }
        )
    }

    public func transactionGetMap(name: String) -> YrsMap? {
        return try! FfiConverterOptionTypeYrsMap.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_get_map(self.uniffiClonePointer(),
                                                                                      FfiConverterString.lower(name), $0)
                }
        )
    }

    public func transactionGetText(name: String) -> YrsText? {
        return try! FfiConverterOptionTypeYrsText.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_get_text(self.uniffiClonePointer(),
                                                                                       FfiConverterString.lower(name), $0)
                }
        )
    }

    public func transactionStateVector() -> [UInt8] {
        return try! FfiConverterSequenceUInt8.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrstransaction_transaction_state_vector(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeYrsTransaction: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsTransaction

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsTransaction {
        return YrsTransaction(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsTransaction) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsTransaction {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsTransaction, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsTransaction_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsTransaction {
    return try FfiConverterTypeYrsTransaction.lift(pointer)
}

public func FfiConverterTypeYrsTransaction_lower(_ value: YrsTransaction) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsTransaction.lower(value)
}

public protocol YrsUndoEventProtocol: AnyObject {
    func hasChanged(sharedRef: YrsCollectionPtr) -> Bool

    func kind() -> YrsUndoEventKind

    func origin() -> YrsOrigin?
}

public class YrsUndoEvent:
    YrsUndoEventProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrsundoevent(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrsundoevent(pointer, $0) }
    }

    public func hasChanged(sharedRef: YrsCollectionPtr) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundoevent_has_changed(self.uniffiClonePointer(),
                                                                            FfiConverterTypeYrsCollectionPtr.lower(sharedRef), $0)
                }
        )
    }

    public func kind() -> YrsUndoEventKind {
        return try! FfiConverterTypeYrsUndoEventKind.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundoevent_kind(self.uniffiClonePointer(), $0)
                }
        )
    }

    public func origin() -> YrsOrigin? {
        return try! FfiConverterOptionTypeYrsOrigin.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundoevent_origin(self.uniffiClonePointer(), $0)
                }
        )
    }
}

public struct FfiConverterTypeYrsUndoEvent: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsUndoEvent

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsUndoEvent {
        return YrsUndoEvent(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsUndoEvent) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsUndoEvent {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsUndoEvent, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsUndoEvent_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsUndoEvent {
    return try FfiConverterTypeYrsUndoEvent.lift(pointer)
}

public func FfiConverterTypeYrsUndoEvent_lower(_ value: YrsUndoEvent) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsUndoEvent.lower(value)
}

/**
 * A manager type able to track changes occurring in a context of a given document.
 * These changes can be reverted using `undo` method call, or re-applied via `redo`.
 */
public protocol YrsUndoManagerProtocol: AnyObject {
    /**
     * Adds a specific origin identifier to a list of tracked origins. If tracked
     * origin list is not empty, current undo manager will only track changes applied
     * over transactions created with a specific origin.
     */
    func addOrigin(origin: YrsOrigin)

    /**
     * Adds a new shared collection to a list of entities observed by current undo manager.
     */
    func addScope(trackedRef: YrsCollectionPtr)

    /**
     * Clears the undo/redo stacks of a current undo manager.
     */
    func clear() throws

    func observeAdded(delegate: YrsUndoManagerObservationDelegate) -> YSubscription

    func observePopped(delegate: YrsUndoManagerObservationDelegate) -> YSubscription

    func observeUpdated(delegate: YrsUndoManagerObservationDelegate) -> YSubscription

    /**
     * Redoes the last operation from undo stack, returning false if redo stack was
     * empty an method had no effect.
     * Fails to execute if there's another transaction in progress.
     */
    func redo() throws -> Bool

    /**
     * Removes an existing origin identifier from a list of tracked origins. If tracked
     * origin list is not empty, current undo manager will only track changes applied
     * over transactions created with a specific origin.
     */
    func removeOrigin(origin: YrsOrigin)

    /**
     * Undoes the last operation, pushing it onto redo stack, returning false if undo
     * stack was empty an method had no effect.
     * Fails to execute if there's another transaction in progress.
     */
    func undo() throws -> Bool

    /**
     * Wraps a set of recent changes together into a single undo operation. These
     * changes will be be undone together on the next `undo` method call.
     */
    func wrapChanges()
}

/**
 * A manager type able to track changes occurring in a context of a given document.
 * These changes can be reverted using `undo` method call, or re-applied via `redo`.
 */
public class YrsUndoManager:
    YrsUndoManagerProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_uniffi_yniffi_fn_clone_yrsundomanager(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_uniffi_yniffi_fn_free_yrsundomanager(pointer, $0) }
    }

    /**
     * Adds a specific origin identifier to a list of tracked origins. If tracked
     * origin list is not empty, current undo manager will only track changes applied
     * over transactions created with a specific origin.
     */
    public func addOrigin(origin: YrsOrigin) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_add_origin(self.uniffiClonePointer(),
                                                                         FfiConverterTypeYrsOrigin.lower(origin), $0)
            }
    }

    /**
     * Adds a new shared collection to a list of entities observed by current undo manager.
     */
    public func addScope(trackedRef: YrsCollectionPtr) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_add_scope(self.uniffiClonePointer(),
                                                                        FfiConverterTypeYrsCollectionPtr.lower(trackedRef), $0)
            }
    }

    /**
     * Clears the undo/redo stacks of a current undo manager.
     */
    public func clear() throws {
        try
            rustCallWithError(FfiConverterTypeYrsUndoError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_clear(self.uniffiClonePointer(), $0)
            }
    }

    public func observeAdded(delegate: YrsUndoManagerObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundomanager_observe_added(self.uniffiClonePointer(),
                                                                                FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate.lower(delegate), $0)
                }
        )
    }

    public func observePopped(delegate: YrsUndoManagerObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundomanager_observe_popped(self.uniffiClonePointer(),
                                                                                 FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate.lower(delegate), $0)
                }
        )
    }

    public func observeUpdated(delegate: YrsUndoManagerObservationDelegate) -> YSubscription {
        return try! FfiConverterTypeYSubscription.lift(
            try!
                rustCall {
                    uniffi_uniffi_yniffi_fn_method_yrsundomanager_observe_updated(self.uniffiClonePointer(),
                                                                                  FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate.lower(delegate), $0)
                }
        )
    }

    /**
     * Redoes the last operation from undo stack, returning false if redo stack was
     * empty an method had no effect.
     * Fails to execute if there's another transaction in progress.
     */
    public func redo() throws -> Bool {
        return try FfiConverterBool.lift(
            rustCallWithError(FfiConverterTypeYrsUndoError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_redo(self.uniffiClonePointer(), $0)
            }
        )
    }

    /**
     * Removes an existing origin identifier from a list of tracked origins. If tracked
     * origin list is not empty, current undo manager will only track changes applied
     * over transactions created with a specific origin.
     */
    public func removeOrigin(origin: YrsOrigin) {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_remove_origin(self.uniffiClonePointer(),
                                                                            FfiConverterTypeYrsOrigin.lower(origin), $0)
            }
    }

    /**
     * Undoes the last operation, pushing it onto redo stack, returning false if undo
     * stack was empty an method had no effect.
     * Fails to execute if there's another transaction in progress.
     */
    public func undo() throws -> Bool {
        return try FfiConverterBool.lift(
            rustCallWithError(FfiConverterTypeYrsUndoError.lift) {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_undo(self.uniffiClonePointer(), $0)
            }
        )
    }

    /**
     * Wraps a set of recent changes together into a single undo operation. These
     * changes will be be undone together on the next `undo` method call.
     */
    public func wrapChanges() {
        try!
            rustCall {
                uniffi_uniffi_yniffi_fn_method_yrsundomanager_wrap_changes(self.uniffiClonePointer(), $0)
            }
    }
}

public struct FfiConverterTypeYrsUndoManager: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = YrsUndoManager

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsUndoManager {
        return YrsUndoManager(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: YrsUndoManager) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsUndoManager {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: YrsUndoManager, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeYrsUndoManager_lift(_ pointer: UnsafeMutableRawPointer) throws -> YrsUndoManager {
    return try FfiConverterTypeYrsUndoManager.lift(pointer)
}

public func FfiConverterTypeYrsUndoManager_lower(_ value: YrsUndoManager) -> UnsafeMutableRawPointer {
    return FfiConverterTypeYrsUndoManager.lower(value)
}

public struct YrsMapChange {
    public var key: String
    public var change: YrsEntryChange

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        key: String,
        change: YrsEntryChange
    ) {
        self.key = key
        self.change = change
    }
}

extension YrsMapChange: Equatable, Hashable {
    public static func == (lhs: YrsMapChange, rhs: YrsMapChange) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.change != rhs.change {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(change)
    }
}

public struct FfiConverterTypeYrsMapChange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsMapChange {
        return
            try YrsMapChange(
                key: FfiConverterString.read(from: &buf),
                change: FfiConverterTypeYrsEntryChange.read(from: &buf)
            )
    }

    public static func write(_ value: YrsMapChange, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterTypeYrsEntryChange.write(value.change, into: &buf)
    }
}

public func FfiConverterTypeYrsMapChange_lift(_ buf: RustBuffer) throws -> YrsMapChange {
    return try FfiConverterTypeYrsMapChange.lift(buf)
}

public func FfiConverterTypeYrsMapChange_lower(_ value: YrsMapChange) -> RustBuffer {
    return FfiConverterTypeYrsMapChange.lower(value)
}

public enum CodingError {
    case EncodingError(message: String)

    case DecodingError(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeCodingError.lift(error)
    }
}

public struct FfiConverterTypeCodingError: FfiConverterRustBuffer {
    typealias SwiftType = CodingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CodingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .EncodingError(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .DecodingError(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CodingError, into buf: inout [UInt8]) {
        switch value {
        case .EncodingError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .DecodingError(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        }
    }
}

extension CodingError: Equatable, Hashable {}

extension CodingError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum YrsChange {
    case added(
        elements: [String]
    )
    case removed(
        range: UInt32
    )
    case retained(
        range: UInt32
    )
}

public struct FfiConverterTypeYrsChange: FfiConverterRustBuffer {
    typealias SwiftType = YrsChange

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsChange {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .added(
                elements: FfiConverterSequenceString.read(from: &buf)
            )

        case 2: return try .removed(
                range: FfiConverterUInt32.read(from: &buf)
            )

        case 3: return try .retained(
                range: FfiConverterUInt32.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: YrsChange, into buf: inout [UInt8]) {
        switch value {
        case let .added(elements):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceString.write(elements, into: &buf)

        case let .removed(range):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(range, into: &buf)

        case let .retained(range):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(range, into: &buf)
        }
    }
}

public func FfiConverterTypeYrsChange_lift(_ buf: RustBuffer) throws -> YrsChange {
    return try FfiConverterTypeYrsChange.lift(buf)
}

public func FfiConverterTypeYrsChange_lower(_ value: YrsChange) -> RustBuffer {
    return FfiConverterTypeYrsChange.lower(value)
}

extension YrsChange: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum YrsDelta {
    case inserted(
        value: String,
        attrs: String
    )
    case deleted(
        index: UInt32
    )
    case retained(
        index: UInt32,
        attrs: String
    )
}

public struct FfiConverterTypeYrsDelta: FfiConverterRustBuffer {
    typealias SwiftType = YrsDelta

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsDelta {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .inserted(
                value: FfiConverterString.read(from: &buf),
                attrs: FfiConverterString.read(from: &buf)
            )

        case 2: return try .deleted(
                index: FfiConverterUInt32.read(from: &buf)
            )

        case 3: return try .retained(
                index: FfiConverterUInt32.read(from: &buf),
                attrs: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: YrsDelta, into buf: inout [UInt8]) {
        switch value {
        case let .inserted(value, attrs):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)
            FfiConverterString.write(attrs, into: &buf)

        case let .deleted(index):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(index, into: &buf)

        case let .retained(index, attrs):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(index, into: &buf)
            FfiConverterString.write(attrs, into: &buf)
        }
    }
}

public func FfiConverterTypeYrsDelta_lift(_ buf: RustBuffer) throws -> YrsDelta {
    return try FfiConverterTypeYrsDelta.lift(buf)
}

public func FfiConverterTypeYrsDelta_lower(_ value: YrsDelta) -> RustBuffer {
    return FfiConverterTypeYrsDelta.lower(value)
}

extension YrsDelta: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum YrsEntryChange {
    case inserted(
        value: String
    )
    case updated(
        oldValue: String,
        newValue: String
    )
    case removed(
        value: String
    )
}

public struct FfiConverterTypeYrsEntryChange: FfiConverterRustBuffer {
    typealias SwiftType = YrsEntryChange

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsEntryChange {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .inserted(
                value: FfiConverterString.read(from: &buf)
            )

        case 2: return try .updated(
                oldValue: FfiConverterString.read(from: &buf),
                newValue: FfiConverterString.read(from: &buf)
            )

        case 3: return try .removed(
                value: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: YrsEntryChange, into buf: inout [UInt8]) {
        switch value {
        case let .inserted(value):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(value, into: &buf)

        case let .updated(oldValue, newValue):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(oldValue, into: &buf)
            FfiConverterString.write(newValue, into: &buf)

        case let .removed(value):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(value, into: &buf)
        }
    }
}

public func FfiConverterTypeYrsEntryChange_lift(_ buf: RustBuffer) throws -> YrsEntryChange {
    return try FfiConverterTypeYrsEntryChange.lift(buf)
}

public func FfiConverterTypeYrsEntryChange_lower(_ value: YrsEntryChange) -> RustBuffer {
    return FfiConverterTypeYrsEntryChange.lower(value)
}

extension YrsEntryChange: Equatable, Hashable {}

public enum YrsUndoError {
    case PendingTransaction(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeYrsUndoError.lift(error)
    }
}

public struct FfiConverterTypeYrsUndoError: FfiConverterRustBuffer {
    typealias SwiftType = YrsUndoError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsUndoError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .PendingTransaction(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: YrsUndoError, into buf: inout [UInt8]) {
        switch value {
        case .PendingTransaction(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        }
    }
}

extension YrsUndoError: Equatable, Hashable {}

extension YrsUndoError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum YrsUndoEventKind {
    case undo
    case redo
}

public struct FfiConverterTypeYrsUndoEventKind: FfiConverterRustBuffer {
    typealias SwiftType = YrsUndoEventKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsUndoEventKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .undo

        case 2: return .redo

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: YrsUndoEventKind, into buf: inout [UInt8]) {
        switch value {
        case .undo:
            writeInt(&buf, Int32(1))

        case .redo:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeYrsUndoEventKind_lift(_ buf: RustBuffer) throws -> YrsUndoEventKind {
    return try FfiConverterTypeYrsUndoEventKind.lift(buf)
}

public func FfiConverterTypeYrsUndoEventKind_lower(_ value: YrsUndoEventKind) -> RustBuffer {
    return FfiConverterTypeYrsUndoEventKind.lower(value)
}

extension YrsUndoEventKind: Equatable, Hashable {}

public protocol YrsArrayEachDelegate: AnyObject {
    func call(value: String)
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private typealias UniFFICallbackHandle = UInt64
private class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for YrsArrayEachDelegate Callback Interface

private let uniffiCallbackHandlerYrsArrayEachDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsArrayEachDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                value: FfiConverterString.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsArrayEachDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsArrayEachDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsArrayEachDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsarrayeachdelegate(uniffiCallbackHandlerYrsArrayEachDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsArrayEachDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsArrayEachDelegate>()
}

extension FfiConverterCallbackInterfaceYrsArrayEachDelegate: FfiConverter {
    typealias SwiftType = YrsArrayEachDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsArrayObservationDelegate: AnyObject {
    func call(value: [YrsChange])
}

// Declaration and FfiConverters for YrsArrayObservationDelegate Callback Interface

private let uniffiCallbackHandlerYrsArrayObservationDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsArrayObservationDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                value: FfiConverterSequenceTypeYrsChange.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsArrayObservationDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsArrayObservationDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsArrayObservationDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsarrayobservationdelegate(uniffiCallbackHandlerYrsArrayObservationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsArrayObservationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsArrayObservationDelegate>()
}

extension FfiConverterCallbackInterfaceYrsArrayObservationDelegate: FfiConverter {
    typealias SwiftType = YrsArrayObservationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsMapIteratorDelegate: AnyObject {
    func call(value: String)
}

// Declaration and FfiConverters for YrsMapIteratorDelegate Callback Interface

private let uniffiCallbackHandlerYrsMapIteratorDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsMapIteratorDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                value: FfiConverterString.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsMapIteratorDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsMapIteratorDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsMapIteratorDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsmapiteratordelegate(uniffiCallbackHandlerYrsMapIteratorDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsMapIteratorDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsMapIteratorDelegate>()
}

extension FfiConverterCallbackInterfaceYrsMapIteratorDelegate: FfiConverter {
    typealias SwiftType = YrsMapIteratorDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsMapKvIteratorDelegate: AnyObject {
    func call(key: String, value: String)
}

// Declaration and FfiConverters for YrsMapKvIteratorDelegate Callback Interface

private let uniffiCallbackHandlerYrsMapKVIteratorDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsMapKvIteratorDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                key: FfiConverterString.read(from: &reader),
                value: FfiConverterString.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsMapKvIteratorDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsMapKvIteratorDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsMapKVIteratorDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsmapkviteratordelegate(uniffiCallbackHandlerYrsMapKVIteratorDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsMapKvIteratorDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsMapKvIteratorDelegate>()
}

extension FfiConverterCallbackInterfaceYrsMapKvIteratorDelegate: FfiConverter {
    typealias SwiftType = YrsMapKvIteratorDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsMapObservationDelegate: AnyObject {
    func call(value: [YrsMapChange])
}

// Declaration and FfiConverters for YrsMapObservationDelegate Callback Interface

private let uniffiCallbackHandlerYrsMapObservationDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsMapObservationDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                value: FfiConverterSequenceTypeYrsMapChange.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsMapObservationDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsMapObservationDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsMapObservationDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsmapobservationdelegate(uniffiCallbackHandlerYrsMapObservationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsMapObservationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsMapObservationDelegate>()
}

extension FfiConverterCallbackInterfaceYrsMapObservationDelegate: FfiConverter {
    typealias SwiftType = YrsMapObservationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsTextObservationDelegate: AnyObject {
    func call(value: [YrsDelta])
}

// Declaration and FfiConverters for YrsTextObservationDelegate Callback Interface

private let uniffiCallbackHandlerYrsTextObservationDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsTextObservationDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.call(
                value: FfiConverterSequenceTypeYrsDelta.read(from: &reader)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsTextObservationDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsTextObservationDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsTextObservationDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrstextobservationdelegate(uniffiCallbackHandlerYrsTextObservationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsTextObservationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsTextObservationDelegate>()
}

extension FfiConverterCallbackInterfaceYrsTextObservationDelegate: FfiConverter {
    typealias SwiftType = YrsTextObservationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

public protocol YrsUndoManagerObservationDelegate: AnyObject {
    func call(e: YrsUndoEvent, ptr: UInt64) -> UInt64
}

// Declaration and FfiConverters for YrsUndoManagerObservationDelegate Callback Interface

private let uniffiCallbackHandlerYrsUndoManagerObservationDelegate: ForeignCallback = { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in

    func invokeCall(_ swiftCallbackInterface: YrsUndoManagerObservationDelegate, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            let result = try swiftCallbackInterface.call(
                e: FfiConverterTypeYrsUndoEvent.read(from: &reader),
                ptr: FfiConverterUInt64.read(from: &reader)
            )
            var writer = [UInt8]()
            FfiConverterUInt64.write(result, into: &writer)
            out_buf.pointee = RustBuffer(bytes: writer)
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    switch method {
    case IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate.handleMap.remove(handle: handle)
        // Successful return
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS
    case 1:
        guard let cb = FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate.handleMap.get(handle: handle) else {
            out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }
        do {
            return try invokeCall(cb, argsData, argsLen, out_buf)
        } catch {
            out_buf.pointee = FfiConverterString.lower(String(describing: error))
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
        }

    // This should never happen, because an out of bounds method index won't
    // ever be used. Once we can catch errors, we should return an InternalError.
    // https://github.com/mozilla/uniffi-rs/issues/351
    default:
        // An unexpected error happened.
        // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitYrsUndoManagerObservationDelegate() {
    uniffi_uniffi_yniffi_fn_init_callback_yrsundomanagerobservationdelegate(uniffiCallbackHandlerYrsUndoManagerObservationDelegate)
}

// FfiConverter protocol for callback interfaces
private enum FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate {
    fileprivate static var handleMap = UniFFICallbackHandleMap<YrsUndoManagerObservationDelegate>()
}

extension FfiConverterCallbackInterfaceYrsUndoManagerObservationDelegate: FfiConverter {
    typealias SwiftType = YrsUndoManagerObservationDelegate
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeYrsArray: FfiConverterRustBuffer {
    typealias SwiftType = YrsArray?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeYrsArray.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeYrsArray.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeYrsMap: FfiConverterRustBuffer {
    typealias SwiftType = YrsMap?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeYrsMap.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeYrsMap.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeYrsText: FfiConverterRustBuffer {
    typealias SwiftType = YrsText?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeYrsText.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeYrsText.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeYrsOrigin: FfiConverterRustBuffer {
    typealias SwiftType = YrsOrigin?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeYrsOrigin.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeYrsOrigin.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeYrsMapChange: FfiConverterRustBuffer {
    typealias SwiftType = [YrsMapChange]

    public static func write(_ value: [YrsMapChange], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeYrsMapChange.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [YrsMapChange] {
        let len: Int32 = try readInt(&buf)
        var seq = [YrsMapChange]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeYrsMapChange.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeYrsChange: FfiConverterRustBuffer {
    typealias SwiftType = [YrsChange]

    public static func write(_ value: [YrsChange], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeYrsChange.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [YrsChange] {
        let len: Int32 = try readInt(&buf)
        var seq = [YrsChange]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeYrsChange.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeYrsDelta: FfiConverterRustBuffer {
    typealias SwiftType = [YrsDelta]

    public static func write(_ value: [YrsDelta], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeYrsDelta.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [YrsDelta] {
        let len: Int32 = try readInt(&buf)
        var seq = [YrsDelta]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeYrsDelta.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeYrsCollectionPtr: FfiConverterRustBuffer {
    typealias SwiftType = [YrsCollectionPtr]

    public static func write(_ value: [YrsCollectionPtr], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeYrsCollectionPtr.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [YrsCollectionPtr] {
        let len: Int32 = try readInt(&buf)
        var seq = [YrsCollectionPtr]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeYrsCollectionPtr.read(from: &buf))
        }
        return seq
    }
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias YrsCollectionPtr = UInt64
public struct FfiConverterTypeYrsCollectionPtr: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsCollectionPtr {
        return try FfiConverterUInt64.read(from: &buf)
    }

    public static func write(_ value: YrsCollectionPtr, into buf: inout [UInt8]) {
        return FfiConverterUInt64.write(value, into: &buf)
    }

    public static func lift(_ value: UInt64) throws -> YrsCollectionPtr {
        return try FfiConverterUInt64.lift(value)
    }

    public static func lower(_ value: YrsCollectionPtr) -> UInt64 {
        return FfiConverterUInt64.lower(value)
    }
}

public func FfiConverterTypeYrsCollectionPtr_lift(_ value: UInt64) throws -> YrsCollectionPtr {
    return try FfiConverterTypeYrsCollectionPtr.lift(value)
}

public func FfiConverterTypeYrsCollectionPtr_lower(_ value: YrsCollectionPtr) -> UInt64 {
    return FfiConverterTypeYrsCollectionPtr.lower(value)
}

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias YrsOrigin = [UInt8]
public struct FfiConverterTypeYrsOrigin: FfiConverter {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> YrsOrigin {
        return try FfiConverterSequenceUInt8.read(from: &buf)
    }

    public static func write(_ value: YrsOrigin, into buf: inout [UInt8]) {
        return FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> YrsOrigin {
        return try FfiConverterSequenceUInt8.lift(value)
    }

    public static func lower(_ value: YrsOrigin) -> RustBuffer {
        return FfiConverterSequenceUInt8.lower(value)
    }
}

public func FfiConverterTypeYrsOrigin_lift(_ value: RustBuffer) throws -> YrsOrigin {
    return try FfiConverterTypeYrsOrigin.lift(value)
}

public func FfiConverterTypeYrsOrigin_lower(_ value: YrsOrigin) -> RustBuffer {
    return FfiConverterTypeYrsOrigin.lower(value)
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_uniffi_yniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_each() != 62231 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_get() != 63631 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_insert() != 50029 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_insert_range() != 7117 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_length() != 39378 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_observe() != 7991 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_push_back() != 15550 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_push_front() != 8045 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_raw_ptr() != 57629 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_remove() != 49300 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_remove_range() != 5300 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarray_to_a() != 10731 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_encode_diff_v1() != 16238 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_get_array() != 64460 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_get_map() != 11751 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_get_text() != 33749 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_transact() != 24297 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsdoc_undo_manager() != 22583 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_clear() != 58500 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_contains_key() != 62951 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_each() != 3606 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_get() != 30941 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_insert() != 48558 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_keys() != 31471 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_length() != 64910 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_observe() != 12647 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_raw_ptr() != 14101 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_remove() != 48362 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmap_values() != 31747 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_append() != 7637 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_format() != 43452 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_get_string() != 57825 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_insert() != 7968 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_insert_embed() != 2895 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_insert_embed_with_attributes() != 25810 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_insert_with_attributes() != 54237 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_length() != 40452 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_observe() != 45326 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_raw_ptr() != 42166 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstext_remove_range() != 46008 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_free() != 42613 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_origin() != 47344 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_apply_update() != 45997 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_encode_state_as_update() != 14549 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_encode_state_as_update_from_sv() != 63667 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_encode_update() != 31285 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_get_array() != 34650 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_get_map() != 24782 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_get_text() != 54845 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstransaction_transaction_state_vector() != 39028 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundoevent_has_changed() != 20294 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundoevent_kind() != 16700 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundoevent_origin() != 43650 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_add_origin() != 26206 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_add_scope() != 20994 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_clear() != 62142 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_observe_added() != 56228 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_observe_popped() != 53414 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_observe_updated() != 19534 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_redo() != 5163 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_remove_origin() != 14248 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_undo() != 44889 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanager_wrap_changes() != 6579 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_constructor_yrsdoc_new() != 35383 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarrayeachdelegate_call() != 23816 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsarrayobservationdelegate_call() != 34683 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmapiteratordelegate_call() != 18340 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmapkviteratordelegate_call() != 54620 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsmapobservationdelegate_call() != 51216 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrstextobservationdelegate_call() != 16633 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_yniffi_checksum_method_yrsundomanagerobservationdelegate_call() != 35430 {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitYrsArrayEachDelegate()
    uniffiCallbackInitYrsArrayObservationDelegate()
    uniffiCallbackInitYrsMapIteratorDelegate()
    uniffiCallbackInitYrsMapKVIteratorDelegate()
    uniffiCallbackInitYrsMapObservationDelegate()
    uniffiCallbackInitYrsTextObservationDelegate()
    uniffiCallbackInitYrsUndoManagerObservationDelegate()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

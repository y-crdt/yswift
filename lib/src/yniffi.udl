namespace yniffi {};

[Error]
enum CodingError {
  "EncodingError",
  "DecodingError",
};

interface YrsDoc {
  constructor();

  [Throws=CodingError]
  sequence<u8> encode_diff_v1([ByRef] YrsTransaction tx, sequence<u8> state_vector);
  
  YrsText get_text(string name);
  YrsArray get_array(string name);
  YrsMap get_map(string name);
  YrsTransaction transact();
};

interface YrsTransaction {
  [Throws=CodingError]
  void transaction_apply_update(sequence<u8> update);

  [Throws=CodingError]
  sequence<u8> transaction_encode_state_as_update_from_sv(sequence<u8> state_vector);

  sequence<u8> transaction_encode_state_as_update();
  sequence<u8> transaction_encode_update();
  sequence<u8> transaction_state_vector();
  YrsText? transaction_get_text(string name);
  YrsArray? transaction_get_array(string name);
  YrsMap? transaction_get_map(string name);
  void free();
};

interface YrsMap {
  u32 length([ByRef] YrsTransaction tx);
  boolean contains_key([ByRef] YrsTransaction tx, string key);
  void insert([ByRef] YrsTransaction tx, string key, string value);

  [Throws=CodingError]
  string get([ByRef] YrsTransaction tx, string key);
  
  [Throws=CodingError]
  string? remove([ByRef] YrsTransaction tx, string key);
  void clear([ByRef] YrsTransaction tx);
  void keys([ByRef] YrsTransaction tx, YrsMapIteratorDelegate delegate);
  void values([ByRef] YrsTransaction tx, YrsMapIteratorDelegate delegate);
  void each([ByRef] YrsTransaction tx, YrsMapKVIteratorDelegate delegate);

  u32 observe(YrsMapObservationDelegate delegate);
  void unobserve(u32 subscription_id);
};

[Enum]
interface YrsEntryChange {
  Inserted(string value);
  Updated(string old_value, string new_value);
  Removed(string value);
};

dictionary YrsMapChange {
    string key;
    YrsEntryChange change;
};

callback interface YrsMapIteratorDelegate {
    void call(string value);
};

callback interface YrsMapKVIteratorDelegate {
    void call(string key, string value);
};

callback interface YrsMapObservationDelegate {
    void call(sequence<YrsMapChange> value);
};

interface YrsArray {
  void each([ByRef] YrsTransaction tx, YrsArrayEachDelegate delegate);

  [Throws=CodingError]
  string get([ByRef] YrsTransaction tx, u32 index);
  void insert([ByRef] YrsTransaction tx, u32 index, string value);
  void insert_range([ByRef] YrsTransaction tx, u32 index, sequence<string> values);
  u32 length([ByRef] YrsTransaction tx);
  void push_back([ByRef] YrsTransaction tx, string value);
  void push_front([ByRef] YrsTransaction tx, string value);
  void remove([ByRef] YrsTransaction tx, u32 index);
  void remove_range([ByRef] YrsTransaction tx, u32 index, u32 len);
  sequence<string> to_a([ByRef] YrsTransaction tx);
  u32 observe(YrsArrayObservationDelegate delegate);
  void unobserve(u32 subscription_id);
};

callback interface YrsArrayEachDelegate {
    void call(string value);
};

callback interface YrsArrayObservationDelegate {
    void call(sequence<YrsChange> value);
};

[Enum]
interface YrsChange {
  Added(sequence<string> elements);
  Removed(u32 range);
  Retained(u32 range);
};

interface YrsText {
  void format([ByRef] YrsTransaction tx, u32 index, u32 length, string attrs);
  void append([ByRef] YrsTransaction tx, string text);
  void insert([ByRef] YrsTransaction tx, u32 index, string chunk);
  void insert_with_attributes([ByRef] YrsTransaction tx, u32 index, string chunk, string attrs);
  void insert_embed([ByRef] YrsTransaction tx, u32 index, string content);
  void insert_embed_with_attributes([ByRef] YrsTransaction tx, u32 index, string content, string attrs);
  string get_string([ByRef] YrsTransaction tx);
  void remove_range([ByRef] YrsTransaction tx, u32 start, u32 length);
  u32 length([ByRef] YrsTransaction tx);
  u32 observe(YrsTextObservationDelegate delegate);
  void unobserve(u32 subscription_id);
};

callback interface YrsTextObservationDelegate {
    void call(sequence<YrsDelta> value);
};

[Enum]
interface YrsDelta {
  Inserted(string value, string attrs);
  Deleted(u32 index);
  Retained(u32 index, string attrs);
};